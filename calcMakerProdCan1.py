import random as rnd
import math

'''The questions generated by this module follow
the pattern of having two operands and one of the
seven arithmetic operators between them.'''
arithOperators = ("+","-","*","/","%","**","//")
#Contains True flag, as this is an actual answer,
#the calculation text and the calculation answer.
twentyCorrectAnswers = []
tmpAnswerOnly = []
#Contains False flag, as this is NOT an actual
#answer, some place holder text and an
#"actual answer" like value.
twentyCorrectAnswersNOT = []
fortyPotentialAnswers = []

'''Get oprator and operands range for a two operand calculation'''
def GetOperatorAndOperandRanges(operatorIndex = -1):
    operator = arithOperators[operatorIndex] if operatorIndex >= 0 else arithOperators[rnd.randint(0,6)]
    
    if operator == "+": return (operator,0,100)     #+	Addition	x + y   
    if operator == "-": return (operator,0,100)     #-	Subtraction	x - y   
    if operator == "*": return (operator,10,99)     #*	Multiplication	x * y    
    if operator == "/": return (operator,10,100)    #/	Division	x / y    
    if operator == "%": return (operator,10,40)     #%	Modulus	x % y    
    if operator == "**": return (operator,0,5)      #**	Exponentiation	x ** y   
    if operator == "//": return (operator,10,100)   #//	Floor division	x // y

#def end

def MakeAnswerLike(actualAnswer,tmpAnswerOnly):
    
    randomNonAnswer = actualAnswer + rnd.randint(1,20)* (-1,1)[rnd.randint(0,1)]
    #Make sure current random non answer is not present in the actual answers list.
    while randomNonAnswer in tmpAnswerOnly:
        randomNonAnswer = MakeAnswerLike(actualAnswer,tmpAnswerOnly)
    #end while

    return randomNonAnswer
#def end

'''Generate a calculation with two operands using one of the 7 basic arithmetic operators.'''
def Generate40PotentialQnA(operatorIndex = -1):
    global fortyPotentialAnswers
    global tmpAnswerOnly
    fortyPotentialAnswers.clear()
    tmpAnswerOnly.clear()
    strCalc = ""
    ansActual = 0
    
    for i in range(20):
        #get operator and oerand ranges; returned in tuple.
        calctmp = GetOperatorAndOperandRanges(operatorIndex)
     
        #generate operand values.
        op1 = rnd.randint(calctmp[1],calctmp[2])
        op2 = rnd.randint(calctmp[1],calctmp[2])
            
        #get calculation answer.
        if calctmp[0] == "+": ansActual = op1 + op2
        if calctmp[0] == "-": ansActual = op1 - op2
        if calctmp[0] == "*": ansActual = op1 * op2
        if calctmp[0] == "/": ansActual = round(float(op1) / float(op2),2)
        if calctmp[0] == "%": ansActual = op1 % op2
        if calctmp[0] == "**": ansActual = op1 ** op2
        if calctmp[0] == "//": ansActual = op1 // op2

        tmpAnswerOnly.append(ansActual) #Only populate for actual answers.
        strCalc = str(op1) + calctmp[0] + str(op2) + " = "

        #Populate list of actual answers and non-answers    
        fortyPotentialAnswers.append([True,strCalc,ansActual])
        randomNonAnswer = MakeAnswerLike(ansActual, tmpAnswerOnly)
        fortyPotentialAnswers.append([False,"randomNonAnswer",randomNonAnswer])
    #end for
    return fortyPotentialAnswers
#def end


'''Generate 20 random float numbers to round.'''
def RoundToRequiredAccuracy(randomDP = True, decimalplaces = 0):
    global fortyPotentialAnswers
    global tmpAnswerOnly
    fortyPotentialAnswers.clear()
    tmpAnswerOnly.clear()
    strCalc = ""
    floatnum = 0
    ansActual = 0
    floatnumlower = 10
    floatnumupper = 1000
    numPartWhole = 0
    numPartFraction = 0
    
    for i in range(20):
        #Generate random number to be rounded.
        numPartWhole = str(rnd.randint(100,999))
        numPartFraction = str(rnd.randint(111,9999))
        floatnum = float(numPartWhole + "." + numPartFraction)
        
        if randomDP:
            decimalplacesQ = rnd.randint(1,len(numPartFraction)-1)
        else:
            decimalplacesQ = decimalplaces
        #end if
   
        #Determine actual answer.
        ansActual = round(float(floatnum), int(decimalplacesQ))        
        
        #Create actual question string.
        strCalc = str(floatnum) + " ({}d.p.)".format(decimalplacesQ)

        #Populate list of actual answers and non-answers   
        fortyPotentialAnswers.append([True,strCalc,ansActual])        
        tmpAnswerOnly.append(ansActual) #Only populate for actual answers.
        
        #Make a unique non answer
        randomNonAnswer = MakeAnswerLike(ansActual, tmpAnswerOnly)
        fortyPotentialAnswers.append([False,"randomNonAnswer",randomNonAnswer])        
    #end for
    return fortyPotentialAnswers
#def end
